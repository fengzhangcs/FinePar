!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALLOCATE_GPU_READ	spmv_util.cpp	412;"	d	file:
ALLOCATE_GPU_READ	spmv_util.h	80;"	d
ALLOCATE_GPU_READ_cpu	spmv_util.h	86;"	d
CHECKERROR	spmv_util.cpp	418;"	d	file:
CHECKERROR	spmv_util.h	94;"	d
CSR_VEC_GROUP_SIZE	spmv_util.h	18;"	d
CSR_VEC_MIN_TH_NUM	spmv_util.h	24;"	d
LoadSourceFromFile	spmv_util.cpp	/^bool LoadSourceFromFile($/;"	f
MAX_LEVELS	spmv_util.h	25;"	d
MY_INFINITY	spmv_csr.cpp	2;"	d	file:
ReadMMF	spmv_util.cpp	/^void ReadMMF(char* filename, coo_matrix<int, float>* mat)$/;"	f
TOTALNUMber	spmv_csr.cpp	3;"	d	file:
VEC2DWIDTH	spmv_util.h	17;"	d
WARPSIZE	spmv_util.h	20;"	d
coo2csr	spmv_util.h	/^void coo2csr(coo_matrix<dimType, dataType>* source, csr_matrix<dimType, dataType>* dest)$/;"	f
coo_col_id	spmv_util.h	/^    dimType* coo_col_id;$/;"	m	struct:coo_matrix
coo_data	spmv_util.h	/^    dataType* coo_data;$/;"	m	struct:coo_matrix
coo_matrix	spmv_util.h	/^struct coo_matrix$/;"	s
coo_row_id	spmv_util.h	/^    dimType* coo_row_id;$/;"	m	struct:coo_matrix
coo_spmv	spmv_util.cpp	/^void coo_spmv(coo_matrix<dimType, dataType>* mat, dataType* vec, dataType* result, dimType vec_size)$/;"	f
cpuoffset	spmv_csr.cpp	/^int cpuoffset;$/;"	v
csr_col_id	spmv_util.h	/^    dimType* csr_col_id;$/;"	m	struct:csr_matrix
csr_data	spmv_util.h	/^    dataType* csr_data;$/;"	m	struct:csr_matrix
csr_matrix	spmv_util.h	/^struct csr_matrix$/;"	s
csr_row_ptr	spmv_util.h	/^    dimType* csr_row_ptr;$/;"	m	struct:csr_matrix
distance	spmv_util.cpp	/^double distance(float* vec1, float* vec2, int size)$/;"	f
findPaddedSize	spmv_util.cpp	/^int findPaddedSize(int realSize, int alignment)$/;"	f
freeObjects	spmv_util.cpp	/^void freeObjects(cl_device_id* devices, cl_context* context, cl_command_queue* cmdQueue, cl_program* program)$/;"	f
free_coo_matrix	spmv_util.h	/^void free_coo_matrix(coo_matrix<dimType, dataType>& mat)$/;"	f
free_csr_matrix	spmv_util.h	/^void free_csr_matrix(csr_matrix<dimType, dataType>& mat)$/;"	f
height	spmv_util.h	/^    dimType height;$/;"	m	struct:matrixInfo
if_sorted_coo	spmv_util.h	/^bool if_sorted_coo(coo_matrix<dimType, dataType>* mat)$/;"	f
initVectorOne	spmv_util.h	/^void initVectorOne(dataType* vec, dimType vec_size)$/;"	f
initVectorZero	spmv_util.h	/^void initVectorZero(dataType* vec, dimType vec_size)$/;"	f
init_coo_matrix	spmv_util.h	/^void init_coo_matrix(coo_matrix<dimType, dataType>& mat)$/;"	f
init_mat_info	spmv_util.h	/^void init_mat_info(matrixInfo<dimType>& info)$/;"	f
initialization	spmv_util.cpp	/^int initialization(cl_device_id* devices, cl_context* context, cl_command_queue* cmdQueue, cl_program* program, char* clFileName)$/;"	f
initialization2	spmv_util.cpp	/^int initialization2(cl_device_id* devices, cl_context* context, cl_command_queue* cmdQueue, cl_program* program, char* clFileName,   cl_command_queue* cpu_cmdQueue)$/;"	f
main	spmv_csr.cpp	/^int main(int argc, char* argv[])$/;"	f
matinfo	spmv_util.h	/^    matrixInfo<dimType> matinfo;$/;"	m	struct:coo_matrix
matinfo	spmv_util.h	/^    matrixInfo<dimType> matinfo;$/;"	m	struct:csr_matrix
matrixInfo	spmv_util.h	/^struct matrixInfo$/;"	s
nnz	spmv_util.h	/^    dimType nnz;$/;"	m	struct:matrixInfo
pad_csr	spmv_util.cpp	/^void pad_csr(csr_matrix<int, float>* source, csr_matrix<int, float>* dest, int alignment)$/;"	f
printMatInfo	spmv_util.cpp	/^void printMatInfo(coo_matrix<int, float>* mat)$/;"	f
print_cl_errstring	spmv_util.cpp	/^char *print_cl_errstring(cl_int err) {$/;"	f
sort_coo	spmv_util.h	/^bool sort_coo(coo_matrix<dimType, dataType>* mat)$/;"	f
spmv_csr_vector_ocl	spmv_csr.cpp	/^void spmv_csr_vector_ocl(csr_matrix<int, float>* mat, int* vplist, int* randlist, int padNum, double& opttime, int& optmethod, char* oclfilename, int* vplistres, int ntimes)$/;"	f
spmv_only	spmv_util.cpp	/^void spmv_only(coo_matrix<int, float>* mat, float* vec, float* coores)$/;"	f
timestamp	spmv_util.cpp	/^double timestamp ()$/;"	f
two_vec_compare	spmv_util.cpp	/^void two_vec_compare(int* coovec, int* newvec, int size)$/;"	f
width	spmv_util.h	/^    dimType width;$/;"	m	struct:matrixInfo
